# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/07_Agents/01_Discrete/12m_agents.dqn.double.ipynb.

# %% auto 0
__all__ = ['DoubleQCalc']

# %% ../../../nbs/07_Agents/01_Discrete/12m_agents.dqn.double.ipynb 2
# Python native modules
# import os
# from collections import deque
# from typing import *
# Third party libs
# from fastcore.all import *
# import torchdata.datapipes as dp
# from torch.utils.data.dataloader_experimental import DataLoader2
# from torch.utils.data.datapipes._typing import _DataPipeMeta, _IterDataPipeMeta
# from torchdata.dataloader2.graph import find_dps,traverse,DataPipe,replace_dp,remove_dp
# Local modules
# import torch
# from torch.nn import *
# import torch.nn.functional as F
# from torch.optim import *

# from fastrl.torch_core import *

# from fastrl.core import *
# from fastrl.agents.core import *
# from fastrl.pipes.core import *
# from fastrl.data.block import *
# from fastrl.memory.experience_replay import *
# from fastrl.agents.core import *
# from fastrl.agents.discrete import *
# from fastrl.loggers.core import *
# from fastrl.loggers.jupyter_visualizers import *
# from fastrl.learner.core import *
# from fastrl.agents.dqn.basic import *
# from fastrl.agents.dqn.target import *

# %% ../../../nbs/07_Agents/01_Discrete/12m_agents.dqn.double.ipynb 5
class DoubleQCalc(dp.iter.IterDataPipe):
    def __init__(self,source_datapipe=None):
        self.source_datapipe = source_datapipe
                
    def __iter__(self):
        self.learner = find_dp(traverse(self),LearnerBase)
        for batch in self.source_datapipe:
            self.learner.done_mask = batch.terminated.reshape(-1,)
            with torch.no_grad():
                chosen_actions = self.learner.model(batch.next_state).argmax(dim=1).reshape(-1,1)
                self.learner.next_q = self.learner.target_model(batch.next_state).gather(1,chosen_actions)
            self.learner.next_q[self.learner.done_mask] = 0
            yield batch
