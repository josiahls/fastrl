# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/12l_agents.dqn.asynchronous.ipynb.

# %% auto 0
__all__ = ['ModelSubscriber', 'ModelPublisher', 'DQNLearner', 'DQNAgent']

# %% ../nbs/12l_agents.dqn.asynchronous.ipynb 3
# Python native modules
import os
from collections import deque
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
from torch.utils.data.datapipes._typing import _DataPipeMeta, _IterDataPipeMeta
import torch.multiprocessing as mp
import torch
from torch.nn import *
import torch.nn.functional as F
from torch.optim import *

from fastai.torch_basics import *
from fastai.torch_core import *
from torchdata.dataloader2.graph import find_dps,traverse
# Local modules

from ...core import *
from ..core import *
from ...pipes.core import *
from ...fastai.data.block import *
from ...memory.experience_replay import *
from ..core import *
from ..discrete import *
from ...loggers.core import *
from ...loggers.jupyter_visualizers import *
from ...learner.core import *
from .basic import *
from ...dataloader2_ext import *
from torchdata.dataloader2 import DataLoader2

# %% ../nbs/12l_agents.dqn.asynchronous.ipynb 8
class ModelSubscriber(dp.iter.IterDataPipe):
    "If an agent is passed to another process and 'spawn' start method is used, then this module is needed."
    def __init__(self,
                 source_datapipe,
                 device:str='cpu'
                ): 
        super().__init__()
        self.source_datapipe = source_datapipe
        self.model = find_dp(traverse(self.source_datapipe,only_datapipe=True),AgentBase).model
        self.buffer = []
        self.device = device
        
    def __iter__(self):
        for x in self.source_datapipe:
            # print('ModelSubscriber',x)
            if type(x)==GetInputItemRequest and x.key.startswith('model_state_dict_pubish'):
            # if self.buffer:
                # print('ModelSubscriber: got x: ',x)
                # state = self.buffer.pop(0)
                self.model.load_state_dict(x.value)
                self.model.to(device=torch.device(self.device))
                continue
            yield x

# %% ../nbs/12l_agents.dqn.asynchronous.ipynb 9
class ModelPublisher(dp.iter.IterDataPipe):
    def __init__(self,source_datapipe,
                 publish_freq:int=1
                ):
        super().__init__()
        self.source_datapipe = source_datapipe
        self.model = find_dp(traverse(self,only_datapipe=True),LearnerBase).model
        self.publish_freq = publish_freq
        self.protocol_clients = []
        self._expect_response = []
        self.initialized = False
 
    def reset(self):
        if not self.initialized:
            for dl in find_dp(traverse(self,only_datapipe=True),LearnerBase).iterable:
                # dataloader.IterableWrapperIterDataPipe._IterateQueueDataPipes,[QueueWrappers]
                for q_wrapper in dl.datapipe.iterable.datapipes:
                    self.protocol_clients.append(q_wrapper.protocol)
                    self._expect_response.append(False)
            self.initialized = True

    def __iter__(self):
        for i,batch in enumerate(self.source_datapipe):
            # print('ModelPublisher: was called')
            #  (this batch we should publish) and (there are protocols) and (there are some that are ready)
            if type(batch)==str and batch.startswith('model_state_dict_pubish'): 
                client_num = int(batch.replace('model_state_dict_pubish_',''))
                if self._expect_response[client_num]:
                    self.protocol_clients[client_num].get_response_input_item()
                continue
            if i%self.publish_freq==0 and self.protocol_clients and not all(self._expect_response):
                # print('PUBLISHING!!!')
                with torch.no_grad():
                    # We need to deepcopy the model itself since `cpu` is an inplace op.
                    # We cant keep the model in cuda because mp.Manager passes around the 
                    # tensors too much and causes errors ref: https://github.com/pytorch/pytorch/issues/30401
                    # This is alos why we cant just call state_dict directly. It returns references
                    # to cuda tensors.
                    state = deepcopy(self.model).cpu().state_dict()

                    for i,client in enumerate(self.protocol_clients):
                        if not self._expect_response[i]: 
                            client.request_input_item(
                                key=f'model_state_dict_pubish_{i}',value=state
                            )
                # print('batch: ',batch)
            yield batch
        
        self.protocol_clients = []
        self._expect_response = []

# %% ../nbs/12l_agents.dqn.asynchronous.ipynb 10
def DQNLearner(
    model,
    dls,
    agent,
    logger_bases=None,
    loss_func=MSELoss(),
    opt=AdamW,
    lr=0.005,
    bs=128,
    max_sz=10000,
    nsteps=1,
    device=None,
    batches=1000
) -> LearnerHead:
    learner = LearnerBase(model,dls,batches=batches,loss_func=MSELoss(),opt=opt(model.parameters(),lr=lr))
    learner = ModelPublisher(learner)
    learner = BatchCollector(learner,logger_bases=logger_bases,batch_on_pipe=LearnerBase)
    learner = EpocherCollector(learner,logger_bases=logger_bases)
    for logger_base in L(logger_bases): learner = logger_base.connect_source_datapipe(learner)
    if logger_bases: 
        learner = RollingTerminatedRewardCollector(learner,logger_bases)
        learner = EpisodeCollector(learner,logger_bases)
    learner = ExperienceReplay(learner,bs=bs,max_sz=max_sz #,clone_detach=dls[0].num_workers>0
                              )
    learner = StepBatcher(learner,device=device)
    learner = QCalc(learner,nsteps=nsteps)
    learner = ModelLearnCalc(learner)
    if logger_bases: 
        learner = LossCollector(learner,logger_bases)
    learner = LearnerHead(learner)
    return learner

# %% ../nbs/12l_agents.dqn.asynchronous.ipynb 11
def DQNAgent(
    model,
    logger_bases=None,
    min_epsilon=0.02,
    max_epsilon=1,
    max_steps=1000,
    device='cpu'
)->AgentHead:
    agent = AgentBase(model)
    agent = StepFieldSelector(agent,field='state')
    agent = InputInjester(agent)
    agent = ModelSubscriber(agent,device=device)
    agent = SimpleModelRunner(agent,device=device)
    agent = ArgMaxer(agent)
    selector = EpsilonSelector(agent,min_epsilon=min_epsilon,max_epsilon=max_epsilon,max_steps=max_steps,device=device)
    if logger_bases is not None: agent = EpsilonCollector(selector,logger_bases)
    agent = ArgMaxer(agent,only_idx=True)
    agent = NumpyConverter(agent)
    agent = PyPrimativeConverter(agent)
    agent = AgentHead(agent)
    return agent
