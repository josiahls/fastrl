# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/01_DataPipes/01f_pipes.iter.firstlast.ipynb.

# %% auto 0
__all__ = ['simple_step_first_last_merge', 'FirstLastMerger', 'n_first_last_steps_expected']

# %% ../../../nbs/01_DataPipes/01f_pipes.iter.firstlast.ipynb 2
# Python native modules
import warnings
from typing import Callable,List,Union
# Third party libs
from fastcore.all import add_docs
import torchdata.datapipes as dp

import torch
# Local modules
from ...core import StepTypes,SimpleStep

# %% ../../../nbs/01_DataPipes/01f_pipes.iter.firstlast.ipynb 4
def simple_step_first_last_merge(steps:List[SimpleStep],gamma):
    fstep,lstep = steps[0],steps[-1]

    reward = fstep.reward
    for step in steps[1:]:
        reward *= gamma
        reward += step.reward
        
    yield SimpleStep(
        state=fstep.state.clone().detach(),
        next_state=lstep.next_state.clone().detach(),
        action=fstep.action,
        episode_n=fstep.episode_n,
        image=fstep.image,
        reward=reward,
        raw_action=fstep.raw_action,
        terminated=lstep.terminated,
        truncated=lstep.truncated,
        total_reward=lstep.total_reward,
        env_id=lstep.env_id,
        proc_id=lstep.proc_id,
        step_n=lstep.step_n,
        batch_size=[]
    )

class FirstLastMerger(dp.iter.IterDataPipe):
    def __init__(self, 
                 source_datapipe,
                 merge_behavior:Callable[[List[Union[StepTypes.types]],float],Union[StepTypes.types]]=simple_step_first_last_merge,
                 gamma:float=0.99
        ):
        self.source_datapipe = source_datapipe
        self.gamma = gamma
        self.merge_behavior = merge_behavior
        
    def __iter__(self) -> StepTypes.types:
        self.env_buffer = {}
        for steps in self.source_datapipe:
            if not isinstance(steps,(list,tuple)):
                raise ValueError(f'Expected {self.source_datapipe} to return a list/tuple of steps, however got {type(steps)}')
                
            if len(steps)==1:
                yield steps[0]
                continue
                
            yield from self.merge_behavior(steps,gamma=self.gamma)
                
add_docs(
    FirstLastMerger,
    """Takes multiple steps and converts them into a single step consisting of properties
    from the first and last steps. Reward is recalculated to factor in the multiple steps.""",
)

# %% ../../../nbs/01_DataPipes/01f_pipes.iter.firstlast.ipynb 15
def n_first_last_steps_expected(
    default_steps:int, # The number of steps the episode would run without n_steps
):
    return default_steps 
    
n_first_last_steps_expected.__doc__=r"""
This function doesnt do much for now. `FirstLastMerger` pretty much undoes the number of steps `nsteps` does.
"""    
