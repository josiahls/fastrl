# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_Environment/06_envs.continuous_debug_env.ipynb.

# %% auto 0
__all__ = ['ContinuousDebugEnv']

# %% ../../nbs/03_Environment/06_envs.continuous_debug_env.ipynb 2
# Python native modules
import os
# Third party libs
import gymnasium as gym
from gymnasium import spaces
from gymnasium.envs.registration import register
import numpy as np
# Local modules

# %% ../../nbs/03_Environment/06_envs.continuous_debug_env.ipynb 4
class ContinuousDebugEnv(gym.Env):
    metadata = {'render_modes': ['console']}  # Corrected metadata key
    
    def __init__(self, goal_position=None, proximity_threshold=0.5):
        super(ContinuousDebugEnv, self).__init__()

        self.goal_position = goal_position if goal_position is not None else np.random.uniform(-10, 10)

        if goal_position is not None:
            self.observation_space = spaces.Box(low=-goal_position, high=goal_position, shape=(1,), dtype=np.float32)
        else:
            self.observation_space = spaces.Box(low=-10, high=10, shape=(1,), dtype=np.float32)

        self.action_space = spaces.Box(low=-1.0, high=1.0, shape=(1,), dtype=np.float32)
        

        self.proximity_threshold = proximity_threshold
        self.state = None

    def step(self, action):
        self.state[0] += action[0]  # Assuming action is a NumPy array, use the first element
        
        distance_to_goal = np.abs(self.state[0] - self.goal_position)
        reward = -distance_to_goal.item()  # Ensure reward is a float
        
        done = distance_to_goal <= self.proximity_threshold
        done = bool(done.item())  # Ensure done is a boolean
        
        info = {}
        
        return self.state, reward, done,done, info

    def reset(self, seed=None, options=None):
        super().reset(seed=seed)  # Call the superclass reset, which handles the seeding
        if self.goal_position is None:
            self.goal_position = np.random.uniform(-10, 10)
        # The state is {current position, goal position}
        self.state = np.array([0.0, self.goal_position], dtype=np.float32)
        
        return self.state, {}  # Return observation and an empty info dictionary


    def render(self, mode='console'):
        if mode != 'console':
            raise NotImplementedError("Only console mode is supported.")
        print(f"Position: {self.state} Goal: {self.goal_position}")


register(
     id="fastrl/ContinuousDebugEnv-v0",
     entry_point="fastrl.envs.continuous_debug_env:ContinuousDebugEnv",
     max_episode_steps=300,
)

