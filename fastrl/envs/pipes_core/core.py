# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05a_envs.pipes_core.core.ipynb (unless otherwise specified).

__all__ = ['Flattener']

# Cell
# Python native modules
import os
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
import typing
from fastai.torch_basics import *
from fastai.torch_core import *
# Local modules
from ...core import *
from ...fastai.data.pipes.core import *
from ...fastai.data.load import *
from ...fastai.data.block import *

# Cell
class Flattener(dp.iter.IterDataPipe):
    "Takes nested lists and unwraps them yielding 1 element at a time."
    def __init__(self, source_datapipe) -> None:
        self.source_datapipe = source_datapipe

    def __iter__(self):
        for list_like_element in self.source_datapipe:
            if not is_listy(list_like_element):
                raise Exception(f'Expected listy object got {type(list_like_element)}\n{list_like_element}')
            yield from (o for o in list_like_element)