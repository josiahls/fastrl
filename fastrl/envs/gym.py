# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_envs.gym.ipynb (unless otherwise specified).

__all__ = ['GymTypeTransform', 'GymStepper']

# Cell
# Python native modules
import os
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
import gym
from fastai.torch_basics import *
from fastai.torch_core import *
# Local modules
from ..fastai.data.pipes.core import *
from ..fastai.data.load import *
from ..fastai.data.block import *
from .core import *

# Cell
class GymTypeTransform(Transform):
    def encodes(self,o): return gym.make(o)

class GymStepper(dp.iter.IterDataPipe):
    def __init__(self,source_datapipe,agent=None):
        self.source_datapipe = source_datapipe
        self.agent = agent
        self._env_ids = {}

    def __iter__(self):
        for env in self.source_datapipe:
            env_id = id(env)





        if getattr(o,'is_done',True):
            state = o.reset(seed=getattr(self,'seed',0))
            o.is_done = False
            o.sum_reward = 0
            episode_n = getattr(o,'step_info',{'episode_n':-1})['episode_n']+1
            o.step_info = make_step(state,None,False,None,0,None,env_id=id(o),step_n=-1,
                                    episode_n=episode_n)
        else:
            state = o.state

        self.agent.agent_base.iterator.append(o.step_info)
        for action in self.agent:
            next_state,reward,done,_ = o.step(action)
            o.sum_reward += reward

        if done: o.is_done = True
        o.step_info = make_step(state,next_state,done,reward,o.sum_reward,action,env_id=id(o),
                                step_n=o.step_info['step_n']+1,episode_n=o.step_info['episode_n'])

        return o.step_info

