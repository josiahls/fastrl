# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_DataLoading/02g_data.block.ipynb.

# %% auto 0
__all__ = ['DataPipeOrDataLoader', 'TransformBlock', 'DataBlock']

# %% ../../nbs/02_DataLoading/02g_data.block.ipynb 3
# Python native modules
import os
from typing import Any,Callable,Generator
from inspect import isfunction,ismethod
# Third party libs
from fastcore.all import *
from torchdata.dataloader2.dataloader2 import DataLoader2
from torchdata.dataloader2.graph import find_dps,traverse,DataPipe
from fastai.torch_core import *
from fastai.data.transforms import *
import torchdata.datapipes as dp
from collections import deque
from fastai.imports import *
# Local modules
from ..pipes.core import *
from ..core import *
from .dataloader2 import *

# %% ../../nbs/02_DataLoading/02g_data.block.ipynb 7
DataPipeOrDataLoader = Union[DataPipe,DataLoader2]
TransformBlock = Callable[[Union[Iterable,DataPipe]],DataPipeOrDataLoader]

# %% ../../nbs/02_DataLoading/02g_data.block.ipynb 10
class DataBlock(object):
    def __init__(
        self,
        # `TransformBlock`s where a single transform block is treated as a single dataloader / datapipe
        # and a Tuple[TransformBlock] is also treated as a single dataloader of combined pipes.
        blocks:List[TransformBlock]=None, 
    ):
        store_attr(but='blocks')
        self.blocks = L(blocks)

    def datapipes(
        self,
        source:Any,
        bs=1,
        n=None,
        return_blocks:bool=False
    ) -> Generator[Union[Tuple[_DataPipeMeta,TransformBlock],_DataPipeMeta],None,None]:
        for b in self.blocks:
            pipe = b.pipe_fn(source,bs=bs,n=n,**b.pipe_fn_kwargs)
            yield (pipe,b) if return_blocks else pipe
        
    def dataloaders(
        self,
        source:Any,
        bs=1,
        n=None,
        num_workers=0,
        **kwargs
    ) -> Generator[DataLoader2,None,None]:
        for pipe,block in self.datapipes(source,bs=bs,n=n,return_blocks=True,**kwargs):
            yield block.dl_type(pipe,num_workers=num_workers,**merge(kwargs,block.dls_kwargs))

add_docs(DataBlock,
"""`DataBlock` is a single object for constructing datapipes and dataloaders from `TransformBlock`s.""",
datapipes="""Combines `self.blocks` with `source` where `bs` can be defined. `n=None` means that the datapipes are
infinite / lengthless. If `n` is an integer then the datapipes will have an expected max len.
""",
dataloaders="Returns a dataloader for each respoctive combination of blocks." 
)
