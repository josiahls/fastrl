# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/08_loggers.core.ipynb (unless otherwise specified).

__all__ = ['LoggerBase', 'LogCollector', 'ProgressBarLogger']

# Cell
# Python native modules
import os
# Third party libs
from fastcore.all import *
from torch.multiprocessing import Queue
import torchdata.datapipes as dp
# Local modules
from ..pipes.core import *

# Cell
class LoggerBase(Callback):
    def __init__(self):
        self.main_queue = Queue()

# Cell
class LogCollector(dp.iter.IterDataPipe):
    def __init__(self,source_datapipe,logger_base:LoggerBase):
        self.source_datapipe = source_datapipe
        self.main_queue = logger_base.main_queue

    def __iter__(self): raise NotImplementedError

# Cell
class ProgressBarLogger(LoggerBase):
    def add_reward_logger(self,before=dp.iter.Batcher,after=None,not_under=None) -> List[dp.iter.IterDataPipe]:
        return L(OneAdder)