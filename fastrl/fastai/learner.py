# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02f_fastai.learner.ipynb (unless otherwise specified).

__all__ = ['default_train_loop', 'Learner']

# Cell
# Python native modules
import os
from typing import *
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
# Local modules
from .data.block import *
from .data.pipes.core import *

# Cell
def default_train_loop(
    items:Iterable,
    splitter:Callable,
    cbs:Optional[List[Callback]]=None,
    type_tfms:Optional[Transform]=None,
    item_tfms:Optional[Transform]=None,
    batch_tfms:Optional[Transform]=None,
    bs:int=2,
    shuffler:Optional[Union[dp.iter.IterDataPipe,dp.map.MapDataPipe]]=None
):
    pipe = dp.map.SequenceWrapper(items).add_cbs(cbs)
    train_vals = DemultiplexerMapDataPipe(
        pipe,
        num_instances=2,
        classifier_fn=splitter,
        drop_none=True
    )
    train_vals = L(train_vals).map(Self.add_cbs(cbs))
    train_vals = L(train_vals).map(TypeTransformLoop,type_tfms=ifnone(type_tfms,L()))
    train_vals = L(train_vals).map(Self.add_cbs(cbs))
    if shuffler:
        train_vals = train_vals.map(shuffler)
    else:
        train_vals = train_vals.map(Self.shuffle())
    train_vals = L(train_vals).map(Self.add_cbs(cbs))
    train_vals = train_vals.map(dp.iter.MapToIterConverter)
    train_vals = L(train_vals).map(Self.add_cbs(cbs))
    train_vals = L(train_vals).map(dp.iter.ShardingFilter).map(Self.add_cbs(cbs))
    train_vals = train_vals.map(ItemTransformLoop, item_tfms=ifnone(item_tfms,L()))
    train_vals = L(train_vals).map(Self.add_cbs(cbs))
    train_vals = train_vals.map(Self.batch(batch_size=bs))
    train_vals = L(train_vals).map(Self.add_cbs(cbs))
    return train_vals

# Cell
class Learner():
    def __init__(self,model,dls,opt,train_loop=None):
        store_attr()

    def fit(self,epochs):
        pass