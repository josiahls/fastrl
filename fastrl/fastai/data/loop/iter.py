# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02b_fastai.data.loop.iter.ipynb (unless otherwise specified).

__all__ = ['T_co', 'IterLoop', 'Batcher']

# Cell
# Python native modules
import os
import logging
from typing import TypeVar
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
from torch.utils.data.graph import traverse
from torchdata.datapipes import functional_datapipe
# Local modules
from .core import *

T_co = TypeVar("T_co", covariant=True)

_logger = logging.getLogger()

# Cell
class IterLoop(Loop,dp.iter.IterDataPipe):pass

@functional_datapipe('cb_batch')
class Batcher(IterLoop,dp.iter.Batcher):
    def __subiter__(self) -> Iterator[T_co]:
        yield from dp.iter.Batcher.__iter__(self)