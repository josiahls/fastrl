# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02b_fastai.data.loop.map.ipynb (unless otherwise specified).

__all__ = ['T_co', 'MapLoop', 'Batcher']

# Cell
# Python native modules
import os
import logging
from typing import TypeVar
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
from torch.utils.data.graph import traverse
from torchdata.datapipes import functional_datapipe
# Local modules
from .core import *

T_co = TypeVar("T_co", covariant=True)

_logger = logging.getLogger()

# Cell
class MapLoop(Loop,dp.map.MapDataPipe):
    _main_pipename='datapipe'

    def __getitem__(self, idx):
        try:
            for cb in self.callbacks:
                getattr(cb,'before_'+self.__class__.__name__.lower(),noop)()

            for cb in self.callbacks:
                getattr(cb,'on_'+self.__class__.__name__.lower(),noop)()
            return getattr(self,self._main_pipename)[idx]

            for cb in self.callbacks:
                getattr(cb,'after_'+self.__class__.__name__.lower(),noop)()
        except Exception as e:
            for cb in self.callbacks:
                getattr(cb,'failed_'+self.__class__.__name__.lower(),noop)()
            self.handle_exeption(e)
        finally:
            for cb in self.callbacks:
                getattr(cb,'finally_'+self.__class__.__name__.lower(),noop)()


@functional_datapipe('cb_batch')
class Batcher(MapLoop,dp.map.Batcher):

    def __subiter__(self) -> Iterator[T_co]:
        yield from dp.map.Batcher.__iter__(self)