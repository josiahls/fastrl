# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02b_fastai.data.load.ipynb (unless otherwise specified).

__all__ = ['DataLoader', 'BatchLoop']

# Cell
# Python native modules
import os
# Third party libs
from fastcore.all import *
from fastai.torch_basics import *
# from torch.utils.data.dataloader import DataLoader as OrgDataLoader
from torch.utils.data import dataloader
# Local modules
from ..loop import *

from fastai.data.load import DataLoader as FastaiDataLoader

from torchdata.datapipes.iter import HttpReader

# Cell
@events
class DataLoader(dataloader.DataLoader,Loop):
    def __init__(self,datapipe,*args,bs=1,n_workers=0,**kwargs):
        Loop.__init__(self)

        # connect_loops2loop((BatchLoop()),self)

        self.it=None
        self.current_batch=None
        self.iter_section=self.sections['iter']
        self.run(['create'])

        dataloader.DataLoader.__init__(self,datapipe,*args,batch_size=bs,num_workers=n_workers,**kwargs)

    def run(self,sections:List[str]=None):
        try:                                                                    # fastrl.skip_traceback
            for k,v in self.sections.items():
                if sections is None or k in sections: run_section(v)            # fastrl.skip_traceback
        except Exception as e:
            e._show_loop_errors=self.verbose
            raise

    def on_create(self):pass

    def on_iter(self):
        self.it=dataloader.DataLoader.__iter__(self)

    def __iter__(self):
        try:
            self.iter_section['before_']()
            self.iter_section['before_inner'].run()                             # fastrl.skip_traceback
            self.iter_section['on_']()
            yield from self.it
            self.iter_section['after_']()
            self.iter_section['after_inner'].run()                              # fastrl.skip_traceback
        except Exception as ex:
            try:
                self.iter_section['failed_']()                                  # fastrl.skip_traceback
                raise
            finally:
                self.iter_section['failed_inner'].run()                         # fastrl.skip_traceback
        finally:
            self.iter_section['finally_']()
            self.iter_section['finally_inner'].run()                            # fastrl.skip_traceback

# class LoopyIter():



@events
class BatchLoop(Loop):
    call_on=L(DataLoader.on_iter)

    def __init__(self):

        super().__init__(self)

    @property
    def dl(self): return self.root_loop

    def on_create_batches(self):pass
