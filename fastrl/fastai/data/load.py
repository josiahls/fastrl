# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02d_fastai.data.load.ipynb (unless otherwise specified).

__all__ = ['TypeTransformLoop', 'ItemTransformLoop', 'BatchTransformLoop', 'default_loader_loop']

# Cell
# Python native modules
import os
from typing import Callable
# Third party libs
from fastcore.all import *
import torchdata.datapipes as dp
from torch.utils.data.dataloader_experimental import DataLoader2
from torch.utils.data.graph import traverse
# Local modules
from .loop.core import *
from .loop.iter import *
from .loop.map import *

from .pipes.map.mux import *
from .pipes.map.demux import *

# Cell
class TypeTransformLoop(MapLoop):
    def __init__(self,datapipe, type_tfms):
        self.type_tfms,self.datapipe = Pipeline(type_tfms),datapipe

    def __subiter__(self):
        for data in self.datapipe:
            yield self.type_tfms(data)

    def __len__(self): return len(self.datapipe)

class ItemTransformLoop(IterLoop):
    def __init__(self,source_datapipe, item_tfms:List[Callable]):
        self.item_tfms,self.source_datapipe = Pipeline(item_tfms),source_datapipe

    def __subiter__(self):
        for data in self.source_datapipe:
            yield self.item_tfms(data)


class BatchTransformLoop(IterLoop):
    def __init__(self,source_datapipe, batch_tfms):
        self.batch_tfms,self.source_datapipe = Pipeline(batch_tfms),source_datapipe

    def __subiter__(self):
        for data in self.source_datapipe:
            yield self.batch_tfms(data)

# Cell
def default_loader_loop(
    items,
    splitter,
    type_tfms=None,
    item_tfms=None,
    batch_tfms=None,
    bs=2
):
    base = dp.map.SequenceWrapper(items)
    type_tfm_dp = TypeTransformLoop(base, ifnone(type_tfms,L()))
    trainer,validater = DemultiplexerMapDataPipe(
        type_tfm_dp,
        num_instances=2,
        classifier_fn=splitter,
        drop_none=True
    )
    train_iter,valid_iter = L(trainer,validater).map(dp.iter.MapToIterConverter)
    train_item_tfm_dp,valid_item_tfm_dp = L(trainer,validater).map(ItemTransformLoop, item_tfms=ifnone(item_tfms,L()))
    train_b,valid_b = trainer.cb_batch(bs),validater.cb_batch(bs)
    return train_b,valid_b