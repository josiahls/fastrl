# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/20h_qlearning.dist_dqn.ipynb (unless otherwise specified).

__all__ = ['DistributionalDQN', 'Vmax', 'Vmin', 'N_ATOMS', 'DELTA_Z', 'distr_projection', 'loss_fn',
           'calc_dist_target_batch']

# Cell
import torch.nn.utils as nn_utils
from fastai.torch_basics import *
from fastai.data.all import *
from fastai.basics import *
from dataclasses import field,asdict
from typing import List,Any,Dict,Callable
from collections import deque
import gym
import torch.multiprocessing as mp
from torch.optim import *

from ..data import *
from ..async_data import *
from ..basic_agents import *
from ..learner import *
from ..metrics import *
from ..ptan_extension import *
from .dqn import *
from .dqn_target import *

if IN_NOTEBOOK:
    from IPython import display
    import PIL.Image

# Cell
Vmax = 10
Vmin = -10
N_ATOMS = 51
DELTA_Z = (Vmax - Vmin) / (N_ATOMS - 1)

class DistributionalDQN(nn.Module):
    def __init__(self, input_shape, n_actions):
        super(DistributionalDQN, self).__init__()

        self.fc = nn.Sequential(
            nn.Linear(input_shape[0], 512),
            nn.ReLU(),
            nn.Linear(512, n_actions * N_ATOMS)
        )

        self.register_buffer("supports", torch.arange(Vmin, Vmax+DELTA_Z, DELTA_Z))
        self.softmax=nn.Softmax(dim=1)

        self.loss_func=None

    def set_opt(self,_):pass

    def forward(self, x,only_qvals=False):
        batch_size = x.size()[0]
        fc_out = self.fc(x.float())
        return fc_out.view(batch_size, -1, N_ATOMS)if not only_qvals else self.qvals(x)

    def both(self, x):
        cat_out = self(x)
        probs = self.apply_softmax(cat_out)
        weights = probs * self.supports
        res = weights.sum(dim=2)
        return cat_out, res

    def qvals(self, x):
        return self.both(x)[1]

    def apply_softmax(self, t):
        return self.softmax(t.view(-1, N_ATOMS)).view(t.size())

# Cell
def distr_projection(next_distr, rewards, dones, Vmin, Vmax, n_atoms, gamma):
    """
    Perform distribution projection aka Catergorical Algorithm from the
    "A Distributional Perspective on RL" paper

    Note: direct from https://github.com/PacktPublishing/Deep-Reinforcement-Learning-Hands-On
    """
#     next_distr=next_distr.detach().cpu()
    rewards=rewards.detach().cpu().numpy()
    dones=dones.detach().cpu().numpy()

    batch_size = len(rewards)
    proj_distr = np.zeros((batch_size, n_atoms), dtype=np.float32)
    delta_z = (Vmax - Vmin) / (n_atoms - 1)
    for atom in range(n_atoms):
        tz_j = np.minimum(Vmax, np.maximum(Vmin, rewards + (Vmin + atom * delta_z) * gamma))
        b_j = (tz_j - Vmin) / delta_z
        l = np.floor(b_j).astype(np.int64)
        u = np.ceil(b_j).astype(np.int64)
        eq_mask = u == l
        proj_distr[eq_mask, l[eq_mask]] += next_distr[eq_mask, atom]
        ne_mask = u != l
        proj_distr[ne_mask, l[ne_mask]] += next_distr[ne_mask, atom] * (u - b_j)[ne_mask]
        proj_distr[ne_mask, u[ne_mask]] += next_distr[ne_mask, atom] * (b_j - l)[ne_mask]
    if dones.any():
        proj_distr[dones] = 0.0
        tz_j = np.minimum(Vmax, np.maximum(Vmin, rewards[dones]))
        b_j = (tz_j - Vmin) / delta_z
        l = np.floor(b_j).astype(np.int64)
        u = np.ceil(b_j).astype(np.int64)
        eq_mask = u == l
        eq_dones = dones.copy()
        eq_dones[dones] = eq_mask
        if eq_dones.any():
            proj_distr[eq_dones, l[eq_mask]] = 1.0
        ne_mask = u != l
        ne_dones = dones.copy()
        ne_dones[dones] = ne_mask
        if ne_dones.any():
            proj_distr[ne_dones, l[ne_mask]] = (u - b_j)[ne_mask]
            proj_distr[ne_dones, u[ne_mask]] = (b_j - l)[ne_mask]
    return proj_distr


# Cell
def loss_fn(a,b): return (-a*b).sum(dim=1).mean()

def calc_dist_target_batch(learn,trainer,s,a,sp,r,d):
#     states_v = torch.tensor(states).to(device)
#     actions_v = torch.tensor(actions).to(device)
#     next_states_v = torch.tensor(next_states).to(device)


    next_distr_v, next_qvals_v = learn.target_model.both(sp)
    next_actions = next_qvals_v.max(1)[1].data.cpu().numpy()
    next_distr = learn.target_model.apply_softmax(next_distr_v).data.cpu().numpy()

    next_best_distr = next_distr[range(s.shape[0]), next_actions]
    # project our distribution using Bellman update
    with torch.no_grad():
        proj_distr = distr_projection(next_best_distr, r, d, Vmin, Vmax, N_ATOMS, learn.discount)

    # calculate net output
    distr_v = learn.model(s,).to(device=default_device())
    state_action_values = distr_v[range(s.shape[0]), a.data]
    state_log_sm_v = F.log_softmax(state_action_values, dim=1).to(device=default_device())
    proj_distr_v = torch.tensor(proj_distr).to(device=default_device())

#     loss_v = -state_log_sm_v * proj_distr_v
#     print(-state_log_sm_v * proj_distr_v)
#     print(state_log_sm_v.shape,proj_distr_v.shape)
    return state_log_sm_v,proj_distr_v

#     state_action_values=learn.model(s.float()).gather(1, a.unsqueeze(-1)).squeeze(-1)

#     next_state_values=trainer.get_next_state_values(sp)
#     next_state_values[d] = 0.0

#     expected_state_action_values=next_state_values.detach()*(learn.discount**learn.n_steps)+r
#     return expected_state_action_values,state_action_values